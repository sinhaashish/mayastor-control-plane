syntax = "proto3";

import "v1/misc/common.proto";
import "v1/blockdevice/blockdevice.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package v1.node;

// Node information
message Node {
  // Node identification
  string node_id = 1;
  // Specification of the node.
  optional NodeSpec spec = 2;
  // Runtime state of the node.
  optional NodeState state = 3;
}

message NodeSpec {
  // Node identification
  string node_id = 1;
  // Endpoint of the io-engine instance (gRPC)
  string endpoint = 2;
  // Node labels.
  common.StringMapValue labels = 3;
  // Drain state
  optional CordonDrainState cordon_drain_state = 4;
  // the host nqn
  optional string node_nqn = 5;
}

message NodeState {
  // id of the io-engine instance
  string node_id = 1;
  // grpc_endpoint of the io-engine instance
  string endpoint = 2;
  // deemed status of the node
  NodeStatus status = 3;
  // the host nqn
  optional string node_nqn = 4;
}

// Multiple nodes
message Nodes {
  repeated Node nodes = 1;
}

// Status of the Node
enum NodeStatus {
  // Node has unexpectedly disappeared
  Unknown = 0;
  // Node is deemed online if it has not missed the
  // registration keep alive deadline
  Online = 1;
  // Node is deemed offline if has missed the
  // registration keep alive deadline
  Offline = 2;
}

// Get storage nodes by filter
message GetNodesRequest {
  oneof filter {
    // filter by node id
    common.NodeFilter node = 1;
  }
  // ignore 404 not found errors
  bool ignore_notfound = 2;
}

// Reponse to the GetNodes request
message GetNodesReply {
  oneof reply {
    Nodes nodes = 1;
    common.ReplyError error = 2;
  }
}

message ProbeRequest {
  // Intentionally empty.
}

message ProbeResponse {
  bool ready = 1;
}

message CordonNodeRequest {
  // Node identification
  string node_id = 1;
  // Node cordon label
  string label = 2;
}

message CordonNodeReply {
  oneof reply {
    Node node = 1;
    common.ReplyError error = 2;
  }
}

message UncordonNodeRequest {
  // Node identification
  string node_id = 1;
  // Node cordon label
  string label = 2;
}

message UncordonNodeReply {
  oneof reply {
    Node node = 1;
    common.ReplyError error = 2;
  }
}

message DrainNodeRequest {
  // Node identification
  string node_id = 1;
  // Node cordon label
  string label = 2;
}

message DrainNodeReply {
  oneof reply {
    Node node = 1;
    common.ReplyError error = 2;
  }
}

message CordonDrainState {
    oneof cordondrainstate {
        CordonedState cordoned = 1;
        DrainState draining = 2;
        DrainState drained = 3;
      }
}

message CordonedState {
  // Cordon information.
  repeated string cordon_labels = 1;
}

message DrainState {
  // Cordon information.
  repeated string cordon_labels = 1;
  // Drain information.
  repeated string drain_labels = 2;
}

message LabelNodeRequest {
  // Node identification
  string node_id = 1;
  // Node label
  string label = 2;
}

message LabelNodeReply {
  oneof reply {
    Node node = 1;
    common.ReplyError error = 2;
  }
}

message UnlabelNodeRequest {
  // Node identification
  string node_id = 1;
  // Node cordon label
  string label = 2;
}

message UnlabelNodeReply {
  oneof reply {
    Node node = 1;
    common.ReplyError error = 2;
  }
}

service NodeGrpc {
  rpc GetNodes (GetNodesRequest) returns (GetNodesReply) {}
  rpc GetBlockDevices (blockdevice.GetBlockDevicesRequest) returns (blockdevice.GetBlockDevicesReply) {}
  rpc Probe (ProbeRequest) returns (ProbeResponse) {}
  rpc CordonNode (CordonNodeRequest) returns (CordonNodeReply) {}
  rpc UncordonNode (UncordonNodeRequest) returns (UncordonNodeReply) {}
  rpc DrainNode (DrainNodeRequest) returns (DrainNodeReply) {}
  rpc LabelNode (LabelNodeRequest) returns (LabelNodeReply) {}
  rpc UnlabelNode (UnlabelNodeRequest) returns (UnlabelNodeReply) {}
}
